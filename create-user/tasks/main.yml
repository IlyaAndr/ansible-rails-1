---
- name: Create main group
  group:
    name: "{{ user.group | default(user.name, true) }}"

- name: Create extra groups
  group:
    name: "{{ item }}"
  with_items: user.groups | default([])

- name: Create
  user:
    name: "{{ user.name }}"
    comment: "{{ user.comment | default('Managed by Ansible', true) }}"
    password: "{{ user.password | default('') }}"
    shell: "{{ user.shell | default('/bin/bash', true) }}"
    groups: "{{ user.groups | default([]) | join(',') }}"
    group: "{{ user.group | default(user.name, true) }}"

- name: SSH Authorized Keys
  authorized_key:
    user: "{{ user.name }}"
    key: "{{ item }}"
  with_items: user.authorized_keys | default([])

- name: Environment Variables
  lineinfile:
    dest: ~/.profile
    regexp: "^export {{ item.key }}="
    line: "export {{ item.key }}={{ item.value }}"
  sudo: true
  sudo_user: "{{ user.name }}"
  when: item.value != ''
  with_dict: user.env | default({})

- name: Environment from Facts
  lineinfile:
    dest: ~/.profile
    regexp: "^export {{ item.1 }}="
    line: >
      export {{ item.1 }}={{
        hostvars[
          item.0.host
          | default(groups[item.0.group][item.0.index | default(0)])
        ][item.1]
      }}
  sudo: true
  sudo_user: "{{ user.name }}"
  when: >
    (item.1 not in user.env)
    and (
      (item.0.host is defined)
      or (
        (item.0.group is defined)
        and (item.0.group in groups)
      )
    )
    and (
      item.1 in hostvars[
        item.0.host
        | default(groups[item.0.group][item.0.index | default(0)])
      ]
    )
  with_subelements:
  - user.env_facts | default([])
  - facts

- name: Bashrc lines
  lineinfile:
    dest: ~/.bashrc
    line: "{{ item }}"
    regexp: "^{{ item }}$"
    create: true
  sudo: true
  sudo_user: "{{ user.name }}"
  with_items: user.bashrc_lines | default([])
